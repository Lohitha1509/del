import numpy as np
import matplotlib.pyplot as plt
from sklearn.neural_network import BernoulliRBM
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import MinMaxScaler
from sklearn import datasets

# Load the digits dataset
digits = datasets.load_digits()
X = np.asarray(digits.data, 'float32')

# Scale the data
scaler = MinMaxScaler(feature_range=(0, 1))
X_scaled = scaler.fit_transform(X)

# Create RBM layers
rbm1 = BernoulliRBM(n_components=100, learning_rate=0.1, batch_size=10, n_iter=20, verbose=0, random_state=42)
rbm2 = BernoulliRBM(n_components=50, learning_rate=0.1, batch_size=10, n_iter=20, verbose=0, random_state=42)

# Create the stacked RBM model
stacked_rbm = Pipeline(steps=[('rbm1', rbm1), ('rbm2', rbm2)])

# Train the stacked RBM
stacked_rbm.fit(X_scaled)

# Transform the input data
X_transformed = stacked_rbm.transform(X_scaled)

# Plotting
plt.figure(figsize=(8, 6))
plt.scatter(X_transformed[:, 0], X_transformed[:, 1], c=digits.target, cmap=plt.cm.get_cmap('viridis', 10))
plt.colorbar(label='Digit Label')
plt.title('Stacked RBM Transform')
plt.xlabel('Component 1')
plt.ylabel('ComponentÂ 2')
plt.show()
