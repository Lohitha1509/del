import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import GRU, Dense, Dropout

# Function to fetch stock data
def fetch_stock_data(ticker, start_date, end_date):
    data = yf.download(ticker, start=start_date, end=end_date)
    return data

# Function to preprocess data
def preprocess_data(data, sequence_length):
    # Extract the 'Close' prices7

    closing_prices = data['Close'].values.reshape(-1, 1)

    # Normalize the data
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_prices = scaler.fit_transform(closing_prices)

    # Prepare the feature (X) and target (y) arrays
    X, y = [], []
    for i in range(sequence_length, len(scaled_prices)):
        X.append(scaled_prices[i-sequence_length:i, 0])
        y.append(scaled_prices[i, 0])
    X, y = np.array(X), np.array(y)

    # Reshape the data to fit the GRU model
    X = np.reshape(X, (X.shape[0], X.shape[1], 1))

    return X, y, scaler

# Function to build the GRU model
def build_gru_model(input_shape):
    model = Sequential()
    model.add(GRU(units=50, return_sequences=True, input_shape=input_shape))
    model.add(Dropout(0.2))
    model.add(GRU(units=50, return_sequences=False))
    model.add(Dropout(0.2))
    model.add(Dense(units=25))
    model.add(Dense(units=1))
    return model

# Function to plot results
def plot_results(data, train_size, predictions, sequence_length):
    train = data[:train_size + sequence_length]
    valid = data[train_size + sequence_length:]
    valid['Predictions'] = predictions

    plt.figure(figsize=(16, 8))
    plt.title('GRU Model: Stock Price Prediction')
    plt.xlabel('Date')
    plt.ylabel('Close Price USD')
    plt.plot(train['Close'], label='Train')
    plt.plot(valid['Close'], label='Test')
    plt.plot(valid['Predictions'], label='Predictions')
    plt.legend()
    plt.show()

# Main code
if __name__ == "__main__":
    # Define parameters
    ticker = 'AAPL'  # Example: Apple Inc.
    start_date = '2015-01-01'
    end_date = '2023-01-01'
    sequence_length = 60

    # Fetch and preprocess the data
    data = fetch_stock_data(ticker, start_date, end_date)
    X, y, scaler = preprocess_data(data, sequence_length)

    # Split the data into training and testing sets

    train_size = int(len(X) * 0.8)
    X_train, X_test = X[:train_size], X[train_size:]
    y_train, y_test = y[:train_size], y[train_size:]

    # Build and compile the GRU model
    model = build_gru_model((X_train.shape[1], 1))
    model.compile(optimizer='adam', loss='mean_squared_error')

    # Train the model
    history = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=50, batch_size=32, verbose=2)

    # Evaluate the model
    score = model.evaluate(X_test, y_test, verbose=0)
    print('Test loss:', score)

    # Make predictions
    predictions = model.predict(X_test)
    predictions = scaler.inverse_transform(predictions)

    # Plot the results
    plot_results(data, train_size, predictions, sequence_length)

    # Plot training & validation loss values
    plt.figure(figsize=(16, 8))
    plt.plot(history.history['loss'])
    plt.plot(history.history['val_loss'])
    plt.title('Model loss')
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.legend(['Train', 'Test'], loc='upper left')
    plt.show()
