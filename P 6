import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
import matplotlib.pyplot as plt

# Load the dataset
data = pd.read_csv('/content/yahoo_stock.csv')

# Ensure the 'Date' column is of datetime type
data['Date'] = pd.to_datetime(data['Date'])

# Extract the 'Close' prices
closing_prices = data['Close'].values.reshape(-1, 1)

# Normalize the data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_prices = scaler.fit_transform(closing_prices)

# Define the sequence length
sequence_length = 60

# Prepare the feature (X) and target (y) arrays
X = []
y = []

for i in range(sequence_length, len(scaled_prices)):
    X.append(scaled_prices[i-sequence_length:i, 0])
    y.append(scaled_prices[i, 0])

X = np.array(X)
y = np.array(y)

# Reshape the data to fit the LSTM model
X = np.reshape(X, (X.shape[0], X.shape[1], 1))

# Build the LSTM model
model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(X.shape[1], 1)))
model.add(Dropout(0.2))
model.add(LSTM(units=50, return_sequences=False))
model.add(Dropout(0.2))
model.add(Dense(units=25))
model.add(Dense(units=1))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Split the data into training and testing sets
train_size = int(len(X) * 0.8)
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

# Train the model
model.fit(X_train, y_train, batch_size=32, epochs=100)

# Make predictions
predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions)

# Prepare the validation data for plotting
valid = data[train_size + sequence_length:]
valid = valid.copy()  # To avoid SettingWithCopyWarning
valid['Predictions'] = predictions

# Plot the results
plt.figure(figsize=(16, 8))
plt.title('Stock Price Prediction')
plt.xlabel('Date')
plt.ylabel('Close Price USD')
plt.plot(data['Date'][:train_size + sequence_length], data['Close'][:train_size + sequence_length], label='Train')
plt.plot(data['Date'][train_size + sequence_length:], data['Close'][train_size + sequence_length:], label='Valid')
plt.plot(valid['Date'], valid['Predictions'], label='Predictions')
plt.legend()
plt.show()
